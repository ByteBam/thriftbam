// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	gen2 "github.com/ByteBam/thirftbam/biz/model/gen"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLinkedThirdUser(db *gorm.DB, opts ...gen.DOOption) linkedThirdUser {
	_linkedThirdUser := linkedThirdUser{}

	_linkedThirdUser.linkedThirdUserDo.UseDB(db, opts...)
	_linkedThirdUser.linkedThirdUserDo.UseModel(&gen2.LinkedThirdUser{})

	tableName := _linkedThirdUser.linkedThirdUserDo.TableName()
	_linkedThirdUser.ALL = field.NewAsterisk(tableName)
	_linkedThirdUser.ID = field.NewInt64(tableName, "id")
	_linkedThirdUser.GiteeID = field.NewInt64(tableName, "gitee_id")
	_linkedThirdUser.UserID = field.NewString(tableName, "user_id")

	_linkedThirdUser.fillFieldMap()

	return _linkedThirdUser
}

type linkedThirdUser struct {
	linkedThirdUserDo linkedThirdUserDo

	ALL     field.Asterisk
	ID      field.Int64
	GiteeID field.Int64
	UserID  field.String

	fieldMap map[string]field.Expr
}

func (l linkedThirdUser) Table(newTableName string) *linkedThirdUser {
	l.linkedThirdUserDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l linkedThirdUser) As(alias string) *linkedThirdUser {
	l.linkedThirdUserDo.DO = *(l.linkedThirdUserDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *linkedThirdUser) updateTableName(table string) *linkedThirdUser {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.GiteeID = field.NewInt64(table, "gitee_id")
	l.UserID = field.NewString(table, "user_id")

	l.fillFieldMap()

	return l
}

func (l *linkedThirdUser) WithContext(ctx context.Context) ILinkedThirdUserDo {
	return l.linkedThirdUserDo.WithContext(ctx)
}

func (l linkedThirdUser) TableName() string { return l.linkedThirdUserDo.TableName() }

func (l linkedThirdUser) Alias() string { return l.linkedThirdUserDo.Alias() }

func (l linkedThirdUser) Columns(cols ...field.Expr) gen.Columns {
	return l.linkedThirdUserDo.Columns(cols...)
}

func (l *linkedThirdUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *linkedThirdUser) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 3)
	l.fieldMap["id"] = l.ID
	l.fieldMap["gitee_id"] = l.GiteeID
	l.fieldMap["user_id"] = l.UserID
}

func (l linkedThirdUser) clone(db *gorm.DB) linkedThirdUser {
	l.linkedThirdUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l linkedThirdUser) replaceDB(db *gorm.DB) linkedThirdUser {
	l.linkedThirdUserDo.ReplaceDB(db)
	return l
}

type linkedThirdUserDo struct{ gen.DO }

type ILinkedThirdUserDo interface {
	gen.SubQuery
	Debug() ILinkedThirdUserDo
	WithContext(ctx context.Context) ILinkedThirdUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILinkedThirdUserDo
	WriteDB() ILinkedThirdUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILinkedThirdUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILinkedThirdUserDo
	Not(conds ...gen.Condition) ILinkedThirdUserDo
	Or(conds ...gen.Condition) ILinkedThirdUserDo
	Select(conds ...field.Expr) ILinkedThirdUserDo
	Where(conds ...gen.Condition) ILinkedThirdUserDo
	Order(conds ...field.Expr) ILinkedThirdUserDo
	Distinct(cols ...field.Expr) ILinkedThirdUserDo
	Omit(cols ...field.Expr) ILinkedThirdUserDo
	Join(table schema.Tabler, on ...field.Expr) ILinkedThirdUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILinkedThirdUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILinkedThirdUserDo
	Group(cols ...field.Expr) ILinkedThirdUserDo
	Having(conds ...gen.Condition) ILinkedThirdUserDo
	Limit(limit int) ILinkedThirdUserDo
	Offset(offset int) ILinkedThirdUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkedThirdUserDo
	Unscoped() ILinkedThirdUserDo
	Create(values ...*gen2.LinkedThirdUser) error
	CreateInBatches(values []*gen2.LinkedThirdUser, batchSize int) error
	Save(values ...*gen2.LinkedThirdUser) error
	First() (*gen2.LinkedThirdUser, error)
	Take() (*gen2.LinkedThirdUser, error)
	Last() (*gen2.LinkedThirdUser, error)
	Find() ([]*gen2.LinkedThirdUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen2.LinkedThirdUser, err error)
	FindInBatches(result *[]*gen2.LinkedThirdUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen2.LinkedThirdUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILinkedThirdUserDo
	Assign(attrs ...field.AssignExpr) ILinkedThirdUserDo
	Joins(fields ...field.RelationField) ILinkedThirdUserDo
	Preload(fields ...field.RelationField) ILinkedThirdUserDo
	FirstOrInit() (*gen2.LinkedThirdUser, error)
	FirstOrCreate() (*gen2.LinkedThirdUser, error)
	FindByPage(offset int, limit int) (result []*gen2.LinkedThirdUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILinkedThirdUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l linkedThirdUserDo) Debug() ILinkedThirdUserDo {
	return l.withDO(l.DO.Debug())
}

func (l linkedThirdUserDo) WithContext(ctx context.Context) ILinkedThirdUserDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l linkedThirdUserDo) ReadDB() ILinkedThirdUserDo {
	return l.Clauses(dbresolver.Read)
}

func (l linkedThirdUserDo) WriteDB() ILinkedThirdUserDo {
	return l.Clauses(dbresolver.Write)
}

func (l linkedThirdUserDo) Session(config *gorm.Session) ILinkedThirdUserDo {
	return l.withDO(l.DO.Session(config))
}

func (l linkedThirdUserDo) Clauses(conds ...clause.Expression) ILinkedThirdUserDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l linkedThirdUserDo) Returning(value interface{}, columns ...string) ILinkedThirdUserDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l linkedThirdUserDo) Not(conds ...gen.Condition) ILinkedThirdUserDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l linkedThirdUserDo) Or(conds ...gen.Condition) ILinkedThirdUserDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l linkedThirdUserDo) Select(conds ...field.Expr) ILinkedThirdUserDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l linkedThirdUserDo) Where(conds ...gen.Condition) ILinkedThirdUserDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l linkedThirdUserDo) Order(conds ...field.Expr) ILinkedThirdUserDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l linkedThirdUserDo) Distinct(cols ...field.Expr) ILinkedThirdUserDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l linkedThirdUserDo) Omit(cols ...field.Expr) ILinkedThirdUserDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l linkedThirdUserDo) Join(table schema.Tabler, on ...field.Expr) ILinkedThirdUserDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l linkedThirdUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILinkedThirdUserDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l linkedThirdUserDo) RightJoin(table schema.Tabler, on ...field.Expr) ILinkedThirdUserDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l linkedThirdUserDo) Group(cols ...field.Expr) ILinkedThirdUserDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l linkedThirdUserDo) Having(conds ...gen.Condition) ILinkedThirdUserDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l linkedThirdUserDo) Limit(limit int) ILinkedThirdUserDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l linkedThirdUserDo) Offset(offset int) ILinkedThirdUserDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l linkedThirdUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkedThirdUserDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l linkedThirdUserDo) Unscoped() ILinkedThirdUserDo {
	return l.withDO(l.DO.Unscoped())
}

func (l linkedThirdUserDo) Create(values ...*gen2.LinkedThirdUser) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l linkedThirdUserDo) CreateInBatches(values []*gen2.LinkedThirdUser, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l linkedThirdUserDo) Save(values ...*gen2.LinkedThirdUser) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l linkedThirdUserDo) First() (*gen2.LinkedThirdUser, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen2.LinkedThirdUser), nil
	}
}

func (l linkedThirdUserDo) Take() (*gen2.LinkedThirdUser, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen2.LinkedThirdUser), nil
	}
}

func (l linkedThirdUserDo) Last() (*gen2.LinkedThirdUser, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen2.LinkedThirdUser), nil
	}
}

func (l linkedThirdUserDo) Find() ([]*gen2.LinkedThirdUser, error) {
	result, err := l.DO.Find()
	return result.([]*gen2.LinkedThirdUser), err
}

func (l linkedThirdUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen2.LinkedThirdUser, err error) {
	buf := make([]*gen2.LinkedThirdUser, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l linkedThirdUserDo) FindInBatches(result *[]*gen2.LinkedThirdUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l linkedThirdUserDo) Attrs(attrs ...field.AssignExpr) ILinkedThirdUserDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l linkedThirdUserDo) Assign(attrs ...field.AssignExpr) ILinkedThirdUserDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l linkedThirdUserDo) Joins(fields ...field.RelationField) ILinkedThirdUserDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l linkedThirdUserDo) Preload(fields ...field.RelationField) ILinkedThirdUserDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l linkedThirdUserDo) FirstOrInit() (*gen2.LinkedThirdUser, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen2.LinkedThirdUser), nil
	}
}

func (l linkedThirdUserDo) FirstOrCreate() (*gen2.LinkedThirdUser, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen2.LinkedThirdUser), nil
	}
}

func (l linkedThirdUserDo) FindByPage(offset int, limit int) (result []*gen2.LinkedThirdUser, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l linkedThirdUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l linkedThirdUserDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l linkedThirdUserDo) Delete(models ...*gen2.LinkedThirdUser) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *linkedThirdUserDo) withDO(do gen.Dao) *linkedThirdUserDo {
	l.DO = *do.(*gen.DO)
	return l
}
