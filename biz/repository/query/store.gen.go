// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	gen2 "github.com/ByteBam/thirftbam/biz/model/gen"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newStore(db *gorm.DB, opts ...gen.DOOption) store {
	_store := store{}

	_store.storeDo.UseDB(db, opts...)
	_store.storeDo.UseModel(&gen2.Store{})

	tableName := _store.storeDo.TableName()
	_store.ALL = field.NewAsterisk(tableName)
	_store.ID = field.NewString(tableName, "id")
	_store.Name = field.NewString(tableName, "name")
	_store.Level = field.NewInt32(tableName, "level")
	_store.PocID = field.NewInt64(tableName, "poc_id")
	_store.IsDeleted = field.NewInt32(tableName, "is_deleted")
	_store.UpdateTime = field.NewTime(tableName, "update_time")
	_store.CreateTime = field.NewTime(tableName, "create_time")
	_store.StoreLink = field.NewString(tableName, "store_link")
	_store.StorePlatform = field.NewString(tableName, "store_platform")
	_store.GitID = field.NewString(tableName, "git_id")
	_store.Isbind = field.NewInt32(tableName, "isbind")

	_store.fillFieldMap()

	return _store
}

type store struct {
	storeDo storeDo

	ALL           field.Asterisk
	ID            field.String
	Name          field.String // 仓库名称
	Level         field.Int32  // 仓库等级
	PocID         field.Int64  // 仓库负责人Id
	IsDeleted     field.Int32  // 是否删除  0 false 1 true
	UpdateTime    field.Time   // 修改时间
	CreateTime    field.Time   // 创建时间
	StoreLink     field.String // 仓库地址
	StorePlatform field.String // 第三方平台
	GitID         field.String // 第三方平台的仓库id
	Isbind        field.Int32  // 是否绑定了webhook

	fieldMap map[string]field.Expr
}

func (s store) Table(newTableName string) *store {
	s.storeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s store) As(alias string) *store {
	s.storeDo.DO = *(s.storeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *store) updateTableName(table string) *store {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.Level = field.NewInt32(table, "level")
	s.PocID = field.NewInt64(table, "poc_id")
	s.IsDeleted = field.NewInt32(table, "is_deleted")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.CreateTime = field.NewTime(table, "create_time")
	s.StoreLink = field.NewString(table, "store_link")
	s.StorePlatform = field.NewString(table, "store_platform")
	s.GitID = field.NewString(table, "git_id")
	s.Isbind = field.NewInt32(table, "isbind")

	s.fillFieldMap()

	return s
}

func (s *store) WithContext(ctx context.Context) IStoreDo { return s.storeDo.WithContext(ctx) }

func (s store) TableName() string { return s.storeDo.TableName() }

func (s store) Alias() string { return s.storeDo.Alias() }

func (s store) Columns(cols ...field.Expr) gen.Columns { return s.storeDo.Columns(cols...) }

func (s *store) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *store) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["level"] = s.Level
	s.fieldMap["poc_id"] = s.PocID
	s.fieldMap["is_deleted"] = s.IsDeleted
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["store_link"] = s.StoreLink
	s.fieldMap["store_platform"] = s.StorePlatform
	s.fieldMap["git_id"] = s.GitID
	s.fieldMap["isbind"] = s.Isbind
}

func (s store) clone(db *gorm.DB) store {
	s.storeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s store) replaceDB(db *gorm.DB) store {
	s.storeDo.ReplaceDB(db)
	return s
}

type storeDo struct{ gen.DO }

type IStoreDo interface {
	gen.SubQuery
	Debug() IStoreDo
	WithContext(ctx context.Context) IStoreDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStoreDo
	WriteDB() IStoreDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStoreDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStoreDo
	Not(conds ...gen.Condition) IStoreDo
	Or(conds ...gen.Condition) IStoreDo
	Select(conds ...field.Expr) IStoreDo
	Where(conds ...gen.Condition) IStoreDo
	Order(conds ...field.Expr) IStoreDo
	Distinct(cols ...field.Expr) IStoreDo
	Omit(cols ...field.Expr) IStoreDo
	Join(table schema.Tabler, on ...field.Expr) IStoreDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStoreDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStoreDo
	Group(cols ...field.Expr) IStoreDo
	Having(conds ...gen.Condition) IStoreDo
	Limit(limit int) IStoreDo
	Offset(offset int) IStoreDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStoreDo
	Unscoped() IStoreDo
	Create(values ...*gen2.Store) error
	CreateInBatches(values []*gen2.Store, batchSize int) error
	Save(values ...*gen2.Store) error
	First() (*gen2.Store, error)
	Take() (*gen2.Store, error)
	Last() (*gen2.Store, error)
	Find() ([]*gen2.Store, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen2.Store, err error)
	FindInBatches(result *[]*gen2.Store, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gen2.Store) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStoreDo
	Assign(attrs ...field.AssignExpr) IStoreDo
	Joins(fields ...field.RelationField) IStoreDo
	Preload(fields ...field.RelationField) IStoreDo
	FirstOrInit() (*gen2.Store, error)
	FirstOrCreate() (*gen2.Store, error)
	FindByPage(offset int, limit int) (result []*gen2.Store, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStoreDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s storeDo) Debug() IStoreDo {
	return s.withDO(s.DO.Debug())
}

func (s storeDo) WithContext(ctx context.Context) IStoreDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s storeDo) ReadDB() IStoreDo {
	return s.Clauses(dbresolver.Read)
}

func (s storeDo) WriteDB() IStoreDo {
	return s.Clauses(dbresolver.Write)
}

func (s storeDo) Session(config *gorm.Session) IStoreDo {
	return s.withDO(s.DO.Session(config))
}

func (s storeDo) Clauses(conds ...clause.Expression) IStoreDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s storeDo) Returning(value interface{}, columns ...string) IStoreDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s storeDo) Not(conds ...gen.Condition) IStoreDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s storeDo) Or(conds ...gen.Condition) IStoreDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s storeDo) Select(conds ...field.Expr) IStoreDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s storeDo) Where(conds ...gen.Condition) IStoreDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s storeDo) Order(conds ...field.Expr) IStoreDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s storeDo) Distinct(cols ...field.Expr) IStoreDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s storeDo) Omit(cols ...field.Expr) IStoreDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s storeDo) Join(table schema.Tabler, on ...field.Expr) IStoreDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s storeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStoreDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s storeDo) RightJoin(table schema.Tabler, on ...field.Expr) IStoreDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s storeDo) Group(cols ...field.Expr) IStoreDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s storeDo) Having(conds ...gen.Condition) IStoreDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s storeDo) Limit(limit int) IStoreDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s storeDo) Offset(offset int) IStoreDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s storeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStoreDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s storeDo) Unscoped() IStoreDo {
	return s.withDO(s.DO.Unscoped())
}

func (s storeDo) Create(values ...*gen2.Store) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s storeDo) CreateInBatches(values []*gen2.Store, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s storeDo) Save(values ...*gen2.Store) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s storeDo) First() (*gen2.Store, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen2.Store), nil
	}
}

func (s storeDo) Take() (*gen2.Store, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen2.Store), nil
	}
}

func (s storeDo) Last() (*gen2.Store, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen2.Store), nil
	}
}

func (s storeDo) Find() ([]*gen2.Store, error) {
	result, err := s.DO.Find()
	return result.([]*gen2.Store), err
}

func (s storeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen2.Store, err error) {
	buf := make([]*gen2.Store, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s storeDo) FindInBatches(result *[]*gen2.Store, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s storeDo) Attrs(attrs ...field.AssignExpr) IStoreDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s storeDo) Assign(attrs ...field.AssignExpr) IStoreDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s storeDo) Joins(fields ...field.RelationField) IStoreDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s storeDo) Preload(fields ...field.RelationField) IStoreDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s storeDo) FirstOrInit() (*gen2.Store, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen2.Store), nil
	}
}

func (s storeDo) FirstOrCreate() (*gen2.Store, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen2.Store), nil
	}
}

func (s storeDo) FindByPage(offset int, limit int) (result []*gen2.Store, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s storeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s storeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s storeDo) Delete(models ...*gen2.Store) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *storeDo) withDO(do gen.Dao) *storeDo {
	s.DO = *do.(*gen.DO)
	return s
}
